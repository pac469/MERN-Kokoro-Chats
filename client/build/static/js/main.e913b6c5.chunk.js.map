{"version":3,"sources":["Axios.js","Components/Sidebar/SidebarChat.js","StateProvider.js","Components/Sidebar/Sidebar.js","Components/Chat/Chat.js","Firebase.js","reducer.js","Components/Login/Login.js","Components/UserHome/UserHome.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","SidebarChat","addNewChat","findRoom","roomName","userID","id","finalMessage","useState","lastMessage","setLastMessage","seed","setSeed","useParams","userId","roomId","useEffect","message","Math","floor","random","createChat","a","name","prompt","post","messages","then","response","roomCreatedId","data","_id","findChat","get","newRoomId","onClick","className","to","Avatar","src","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","currentUser","pusher","newMessage","user","userRooms","setUserRooms","userRoomsIds","setUserRoomsIds","index","setIndex","rooms","length","includes","oldUserRoomsIds","oldUserRooms","roomIndex","findIndex","room","roomID","newUserRooms","channel","subscribe","bind","newRoom","unbind_all","unsubscribe","photoURL","IconButton","placeholder","type","map","Chat","userName","input","setInput","setRoomName","setMessages","sendMessage","e","preventDefault","today","Date","timestamp","timezoneConverter","onChange","target","messageDate","date","stringDate","String","utcOffset","getTimezoneOffset","setMinutes","getMinutes","localDate","stringLocalDate","localOffset","stringHours","hours","getHours","stringMinutes","minutes","month","getMonth","getDate","getFullYear","auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","provider","GoogleAuthProvider","actionTypes","state","action","console","log","Login","dispatch","class","Button","signInWithPopup","result","catch","error","alert","UserHome","dbUserId","displayName","Pusher","cluster","App","setRooms","dbUser","setDbUser","setNewMessage","params","email","newUser","pushMessage","newRooms","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e913b6c5.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'http://localhost:9000'\n})\n\nexport default instance;","import React, {useState, useEffect} from 'react'\nimport './SidebarChat.css'\nimport {Avatar, IconButton} from '@material-ui/core';\nimport axios from '../../Axios'\nimport {Link} from 'react-router-dom';\nimport { useParams } from \"react-router-dom\";\nimport Pusher from 'pusher-js'\n\nfunction SidebarChat({addNewChat, findRoom, roomName, userID, id, finalMessage}) {\n    const [lastMessage, setLastMessage] = useState('')\n    const [seed, setSeed] = useState('');\n    const { userId, roomId } = useParams();\n\n    \n    useEffect(()=>{\n        if(finalMessage){\n            setLastMessage(finalMessage.message)\n        }\n    },[finalMessage]);\n\n\n    useEffect(()=>{\n        setSeed(Math.floor(Math.random()*500));\n    }, []);\n\n   \n\n    const createChat = async () =>{\n        const name = prompt(\"Please enter name for chat\");\n\n        if(name){\n            \n            await axios.post('/rooms/new',{\n                roomName: name,\n                messages:[]\n            }). then(response=>{\n                const roomCreated = response.data\n                const roomCreatedId = {\n                    roomId:roomCreated._id\n                }\n                \n                axios.post(`/users/update/${userId}`, roomCreatedId)\n            })\n            //post room in user rooms \n        }\n    }\n\n    const findChat = async () =>{\n        const roomId = prompt(\"Please enter the Room ID: \");\n        if(roomId){\n            //get room from rooms collection\n            await axios.get(`/rooms/sync/${roomId}`)\n            .then(response=>{\n                const newRoom = response.data;\n                let newRoomId = {\n                    roomId:newRoom._id\n                }\n                axios.post(`/users/update/${userId}`, newRoomId)\n            })\n        }\n    }\n\n    \n    \n    \n\n    return addNewChat ?\n    (\n        <div onClick={createChat} className=\"sidebarChat\">\n            <h2> Create room</h2>\n        </div>\n    ): findRoom ?(\n         <div onClick={findChat} className=\"sidebarChat\">\n            <h2> Find room</h2>\n        </div> \n    ):(\n        <Link className=\"link\" to={`/user/${userID}/room/${id}`}>\n            <div className=\"sidebarChat\">\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\n                <div className=\"sidebarChat__info\">\n                    <h2>{roomName}</h2>\n                        <p>{lastMessage}</p>\n                </div>\n            </div>\n        </Link>\n    )\n}\n\nexport default SidebarChat\n","import React, { createContext, useContext, useReducer } from \"react\";\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n    <StateContext.Provider value = {useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n\n);\n\nexport const useStateValue = () => useContext(StateContext); ","import React, {useState, useEffect} from 'react'\nimport './Sidebar.css'\nimport ChatIcon from '@material-ui/icons/Chat';\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {Avatar, IconButton} from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SidebarChat from './SidebarChat.js'\nimport axios from '../../Axios'\nimport {useStateValue} from '../../StateProvider'\nimport { useParams } from \"react-router-dom\";\n\nfunction Sidebar({currentUser, pusher , newMessage}) {\n\n    const [{user},dispatch] = useStateValue()\n    const [userRooms,setUserRooms] = useState([])\n    const [userRoomsIds, setUserRoomsIds] = useState([])\n    const { userId, roomId } = useParams();\n    const [index,setIndex] = useState(0);\n\n    useEffect(()=>{\n        if(currentUser){\n            if(currentUser.rooms){\n                if(currentUser.rooms.length > 0){\n                    for (let roomId of currentUser.rooms){\n                        if(userRoomsIds.includes(roomId)) continue\n                        setUserRoomsIds(oldUserRoomsIds=>[...oldUserRoomsIds,roomId])\n                        axios.get(`/rooms/sync/${roomId}`)\n                            .then(response =>{\n                                setUserRooms(oldUserRooms => [...oldUserRooms, response.data])\n                            })\n                    }\n                }else if(currentUser.rooms.length == 0 && index == 0){\n                    axios.post('/rooms/new',{\n                        roomName: 'Paulin Alcoser',\n                        messages:[]\n                    }). then(response=>{\n                        const roomCreated = response.data\n                        const roomCreatedId = {\n                            roomId:roomCreated._id\n                        }\n                        axios.post(`/users/update/${userId}`, roomCreatedId);\n                        axios.post('/users/update/5fe4268653855170a466d7c1', roomCreatedId);\n                    })\n                    setIndex(1)\n                }\n            }\n        }\n    },[ userRooms, userRoomsIds,currentUser])\n\n    useEffect(() => {\n        let roomIndex = userRooms.findIndex(room => room._id === newMessage.roomID);\n        let newUserRooms = [...userRooms]\n        if(newUserRooms[roomIndex])\n        newUserRooms[roomIndex] = {...newUserRooms[roomIndex], messages:[...userRooms[roomIndex].messages, newMessage]}\n        setUserRooms(newUserRooms)\n       \n    },[newMessage])\n\n   \n\n    useEffect(() => {\n        const channel = pusher.subscribe('rooms');\n        channel.bind('updated', (newRoom)=> {\n            if(!userRoomsIds.includes(newRoom.roomId)) setUserRoomsIds(oldUserRoomsIds=>[...oldUserRoomsIds,newRoom.roomId])\n        });\n        return () =>{\n            channel.unbind_all()\n            channel.unsubscribe();\n        } \n    },[userRoomsIds])\n    \n    \n    return (\n        <div className=\"sidebar\">\n           \n            <div className=\"sidebar__header\">\n                <Avatar src={user?.photoURL}/>\n                <div className=\"sidebar__headerRight\">\n                    <IconButton> <ChatIcon className=\"headerRight__icon\"/> </IconButton>\n                    <IconButton><DonutLargeIcon className=\"headerRight__icon\"/> </IconButton>\n                    <IconButton><MoreVertIcon className=\"headerRight__icon\"/></IconButton>\n                </div>\n            </div>\n            <div className=\"sidebar__search\">\n                <div className=\"sidebar__searchContainer\">\n                    <SearchIcon/>\n                    <input placeholder=\"Search or start new chat\" type=\"text\"/>\n                </div>\n            </div>\n            <div className=\"sidebar__chats\">\n                <SidebarChat addNewChat/>\n                <SidebarChat findRoom/>\n                {userRooms.length && userRooms.map((room)=>(\n                    <SidebarChat key={room._id} userID={currentUser._id} id={room._id} roomName={room.roomName} finalMessage={room.messages[room.messages.length -1]}/>\n                ))}\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n\n\n","import React, { useState, useEffect } from 'react'\nimport './Chat.css'\nimport { Avatar, IconButton } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport axios from '../../Axios'\nimport { useParams } from \"react-router-dom\";\nimport Pusher from 'pusher-js'\nimport firebase from 'firebase'\n\n\nfunction Chat({ rooms, userName, newMessage }) {\n    const [input, setInput] = useState('');\n    const { userId, roomId } = useParams();\n    const [roomName, setRoomName] = useState('');\n    const [messages, setMessages] = useState([]);\n\n\n\n    useEffect(() => {\n        if (roomId) {\n            for (let room of rooms) {\n                if (room._id === roomId) {\n                    setRoomName(room.roomName)\n                    setMessages(room.messages)\n                    break;\n                }\n            }\n        }\n    }, [rooms, roomId])\n\n    useEffect(() => {\n        if (roomId) {\n            for (let room of rooms) {\n                if (newMessage._id === roomId) {\n                    setRoomName(room.roomName)\n                    setMessages(room.messages)\n                    break;\n                }\n            }\n        }\n    }, [newMessage])\n\n\n    const sendMessage = async (e) => {\n        e.preventDefault();\n        let today = new Date()\n        await axios.post(`/rooms/new/${roomId}`, {\n            message: input,\n            name: userName,\n            timestamp: today\n        });\n        setInput('')\n    }\n\n    return (\n        <div className=\"chat\">\n            <div className=\"chat__header\">\n                <Avatar />\n                <div className=\"chat__headerInfo\">\n                    <h3>{roomName}</h3>\n                    <p> Last seen at{\" \"}{timezoneConverter(messages[messages.length - 1]?.timestamp)} </p>\n                    <p> Room ID: {roomId}</p>\n                </div>\n                <div className=\"chat__headerRight\">\n                    <IconButton> <SearchIcon /> </IconButton>\n                    <IconButton> <AttachFileIcon /> </IconButton>\n                    <IconButton> <MoreVertIcon /> </IconButton>\n                </div>\n            </div>\n            <div className=\"chat__body\">\n                {messages && messages.map(message => (\n                    <p key={message._id} className={`chat__message ${message.name === userName && 'chat__delivered'}`}>\n                        <span className=\"chat__name\">{message.name}</span>\n\n                        {message.message}\n\n                        <span className=\"chat__timestamp\">\n                            {timezoneConverter(message.timestamp)}\n                        </span>\n                    </p>\n                ))}\n\n            </div>\n            <div className=\"chat__footer\">\n                <InsertEmoticonIcon />\n                <form>\n                    <input\n                        value={input}\n                        onChange={(e) => setInput(e.target.value)}\n                        placeholder=\"Type a message\"\n                        type=\"text\"\n                    />\n                    <button onClick={sendMessage}\n                        type=\"submit\">\n                        Send\n                    </button>\n                </form>\n                <MicIcon />\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n\nfunction timezoneConverter(messageDate){\n    let date = new Date(messageDate) \n    let stringDate = String(date)\n    let utcOffset = date.getTimezoneOffset();\n    if(!stringDate.includes('GMT-'))\n        utcOffset = -utcOffset\n    date.setMinutes(date.getMinutes() + utcOffset)\n    let localDate = new Date();\n    let stringLocalDate = String(localDate)\n    let localOffset = localDate.getTimezoneOffset();\n    if(stringLocalDate.includes('GMT-'))\n        localOffset = -localOffset\n    date.setMinutes(date.getMinutes() + localOffset)\n    let hours = date.getHours()\n    let stringHours\n    if(hours>9)\n        stringHours = String(hours)\n    else\n        stringHours = `0${hours}`\n    let minutes = date.getMinutes()\n    let stringMinutes\n    if(minutes>9)\n        stringMinutes = String(minutes)\n    else\n        stringMinutes = `0${minutes}`\n\n    let month = date.getMonth() + 1\n    let convertedDate = `${stringHours}:${stringMinutes} - ${month}/${date.getDate()}/${date.getFullYear()}`\n    return convertedDate\n}","import firebase from 'firebase'\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAj6CuyL_rmC0I9tVRXhsiNRaBC-ntMpyE\",\n    authDomain: \"kokoro-a2bf0.firebaseapp.com\",\n    databaseURL: \"https://kokoro-a2bf0.firebaseio.com\",\n    projectId: \"kokoro-a2bf0\",\n    storageBucket: \"kokoro-a2bf0.appspot.com\",\n    messagingSenderId: \"440779738043\",\n    appId: \"1:440779738043:web:aa92afdcacf1ad7906929e\"\n  };\n\n// Initialize Firebase\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider(); \n\nexport {auth, provider};","export const initialState = {\n    user:null,\n};\n\nexport const actionTypes = {\n    SET_USER: \"SET_USER\",\n};\n\nconst reducer = (state,action) => {\n    console.log(action);\n    switch(action.type) {\n        case actionTypes.SET_USER:\n            return{\n                ...state,\n                user: action.user,\n            };\n\n            default:\n                return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport './Login.css';\nimport { Button } from \"@material-ui/core\";\nimport LoyaltyIcon from '@material-ui/icons/Loyalty';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { auth } from '../../Firebase';\nimport { provider } from '../../Firebase';\nimport { actionTypes } from '../../reducer';\nimport { useStateValue } from '../../StateProvider'\nimport { Link } from 'react-router-dom';\n\nfunction Login() {\n    const [{ user }, dispatch] = useStateValue();\n\n    const signIn = () => {\n        auth.signInWithPopup(provider)\n            .then(result => {\n                dispatch({\n                    type: actionTypes.SET_USER,\n                    user: result.user,\n                });\n            })\n            .catch((error) => alert(error.message))\n    }\n    return (\n        <div className=\"login\">\n            <div className=\"login__container\"> \n                <div className=\"login__logo\">\n                    <h1>KOKORO CHATS</h1>\n                    <LoyaltyIcon className=\"login__icon\" />\n                </div>\n                <Link class=\"link\" to='/'>\n                    <Button class=\"login__button\" onClick={signIn}>\n                        Sign In With Google\n                    </Button>\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","import React from 'react'\nimport './UserHome.css'\nimport { useStateValue } from '../../StateProvider'\nimport {Link} from 'react-router-dom';\n\nfunction UserHome({dbUserId}) {\n    const [{user}, dispatch] = useStateValue();\n\n    return (\n        <div className=\"userHome\">\n            <img src={user?.photoURL}/>\n            <h1> Hello {user.displayName}!</h1>\n            {dbUserId && <Link className=\"userHome__button\"to={`user/${dbUserId}/room`}> \n                <button>Unlock Your Chats</button>\n            </Link>}\n            \n        </div>\n    )\n}\n\nexport default UserHome\n","\nimport './App.css';\nimport Sidebar from './Components/Sidebar/Sidebar'\nimport Chat from './Components/Chat/Chat'\nimport Login from './Components/Login/Login'\nimport UserHome from './Components/UserHome/UserHome'\nimport React,{ useEffect, useState} from 'react';\nimport Pusher from 'pusher-js'\nimport axios from './Axios.js'; \nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport { useStateValue } from './StateProvider'\n\nconst pusher = new Pusher('8cc15aed3d6658d11adc', { \n  cluster: 'us3'\n});\n\n\nfunction App() {\n  \n  const [rooms, setRooms] = useState([]);\n  const [dbUser, setDbUser] = useState({})\n  const [{user}, dispatch] = useStateValue();\n  const [newMessage, setNewMessage] = useState({})\n  \n  \n\n  useEffect(()=>{\n      axios.get('/rooms/sync')\n      .then(response => {\n        setRooms(response.data); \n      })\n  },[rooms])\n\n\n\n  useEffect(() => {\n    if(user){\n      axios.get('/users/sync', {params: {email:user.email}})\n      .then(response => {\n         if(response.data !== \"\"){\n           setDbUser(response.data)\n         }else{\n           const newUser = {\n             userName:user.displayName,\n             email:user.email,\n             rooms:[]\n           }\n           axios.post('users/new', newUser).then(response =>{\n            setDbUser(response.data)\n           })\n         }\n      })    \n    }\n  }, [user, dbUser]) \n\n  useEffect(() => {\n    \n    if(rooms){\n      const channel = pusher.subscribe('messages');\n      channel.bind('updated', (pushMessage)=> {\n          if(pushMessage._id !== newMessage._id){\n            setNewMessage(pushMessage)\n            let roomIndex = rooms.findIndex(room => room._id === pushMessage.roomID);\n            let newRooms = [...rooms]\n            if(rooms[roomIndex]){\n              newRooms[roomIndex] = {...rooms[roomIndex], messages:[...rooms[roomIndex].messages, pushMessage]}\n              setRooms(newRooms)\n            }\n          }    \n      });\n      return () =>{\n          channel.unbind_all()\n          channel.unsubscribe();\n      }\n    }  \n  },[newMessage, rooms])\n\n  \n\n  return (\n    <div className=\"app\">\n      <Router>\n      {!user ? (\n        <Login/>\n      ):(\n        <div className=\"app__body\">\n        {/* <Router> */}\n          <Switch>\n            <Route path=\"/user/:userId/room/:roomId?\">\n                {dbUser && <Sidebar currentUser={dbUser} pusher={pusher} newMessage={newMessage}/>}\n                <Chat rooms={rooms} userName={user.displayName} newMessage={newMessage}/>\n            </Route>\n            <Route path=\"/\">\n                {dbUser && <UserHome dbUserId={dbUser._id}/>}\n            </Route>\n          </Switch>\n        {/* </Router> */}\n      </div>\n      )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from './StateProvider'\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}